# multiplatform build heavily borrowed from https://github.com/TECH7Fox/asterisk-hass-addons/blob/main/.github/workflows/ci.yaml, thank you

name: CD Master

on:
  push:
    branches:
      - 'master'
  workflow_dispatch:
    inputs:
      e2e:
        description: 'Run E2E tests'
        default: true
        type: boolean
        required: true
      push:
        description: 'Push images to GHCR'
        default: true
        type: boolean
        required: true

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  prepare:
    runs-on: ubuntu-latest
    name: Prepare
    steps:
      - uses: actions/checkout@v3
        with:
          fetch-depth: 0

      - name: Extract version
        uses: martinbeentjes/npm-get-version-action@main
        id: package-version
        with:
          path: frontend

      - name: Extract metadata (tags, labels) for Docker
        id: meta
        uses: docker/metadata-action@v4
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
          tags: |
            type=semver,pattern={{version}},value=v${{ steps.package-version.outputs.current-version }}

    outputs:
      version: ${{ steps.package-version.outputs.current-version }}
      meta-version: ${{ steps.meta.outputs.version }}
      meta-labels: ${{ steps.meta.outputs.labels }}
      meta-json: ${{ steps.meta.outputs.json }}

  e2e:
    runs-on: ubuntu-latest
    name: E2E tests
    steps:
      - uses: actions/checkout@v3
        name: Checkout
      - uses: ./.github/actions/e2e
        name: Run E2E tests
        # if: github.event.inputs.e2e == 'true'
        with:
          cypress-key: ${{ secrets.CYPRESS_RECORD_KEY }}
          github-token: ${{ secrets.GITHUB_TOKEN }}
          codecov-token: ${{ secrets.CODECOV_TOKEN }}

  docker:
    name: Push to Docker Registry
    needs: [prepare, e2e]
    strategy:
      fail-fast: false
      matrix:
        os: ['ubuntu-latest', 'buildjet-4vcpu-ubuntu-2204-arm']
    runs-on: ${{ matrix.os }}
    steps:
      - uses: actions/checkout@v3
        with:
          fetch-depth: 0

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      - name: Login to GHCR
        uses: docker/login-action@v2
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Set cache flags
        id: cache-flags
        run: |
          # Set the cache-to output
          echo 'cache-to=type=gha,scope=${{ github.ref_name }}-${{ matrix.os }}' >> "${GITHUB_OUTPUT}"

          # Set the cache-from output
          if [[ '${{ github.event_name }}' == 'push' ]]; then
            echo 'cache-from=type=gha,scope=${{ github.ref_name }}-${{ matrix.os }}' >> "${GITHUB_OUTPUT}"
          else
            # Use cache from target branch too when building a pull request

            # In this case, it has to be a multiline string
            # https://docs.github.com/en/actions/using-workflows/workflow-commands-for-github-actions#multiline-strings
            EOF=$(dd if=/dev/urandom bs=15 count=1 status=none | base64)

            echo "cache-from<<${EOF}" >> "${GITHUB_OUTPUT}"

            printf '%s\n' \
              "type=gha,scope=${{ github.ref_name }}-${{ matrix.os }}" \
              "type=gha,scope=${{ github.base_ref }}-${{ matrix.os }}" \
              >> "${GITHUB_OUTPUT}"

            echo "${EOF}" >> "${GITHUB_OUTPUT}"
          fi

      - name: Build and push by digest
        uses: docker/build-push-action@v4
        id: buildDocker
        with:
          context: .
          file: ./docker/Dockerfile
          pull: true
          labels: ${{ needs.prepare.outputs.meta-labels }}
          build-args: |
            COMMIT_SHA=${{ github.sha }}
            BUILD_VERSION=${{ needs.prepare.outputs.version }}
          cache-from: |
            ${{ steps.cache-flags.outputs.cache-from }}
          cache-to: |
            ${{ steps.cache-flags.outputs.cache-to }}
          outputs: type=image,name=${{ env.REGISTRY }}/${{ env.IMAGE_NAME }},push-by-digest=true,name-canonical=true,push=true

      - name: Export digest
        run: |
          mkdir -p /tmp/digests
          digest="${{ steps.buildDocker.outputs.digest }}"
          touch "/tmp/digests/${digest#sha256:}"

      - name: Upload digest
        uses: actions/upload-artifact@v3
        with:
          name: digests
          path: /tmp/digests/*
          if-no-files-found: error
          retention-days: 1

  merge:
    runs-on: ubuntu-latest
    needs: [prepare, docker]
    name: Merge Docker images
    steps:
      - name: Download digests
        uses: actions/download-artifact@v3
        with:
          name: digests
          path: /tmp/digests
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2
      - name: Login to GHCR
        uses: docker/login-action@v2
        # if: github.event.inputs.push == 'true'
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}
      - name: Create manifest list and push
        # if: github.event.inputs.push == 'true'
        working-directory: /tmp/digests
        run: |
          docker buildx imagetools create $(jq -r '"-t " + (.tags | join(" -t "))' <<< '${{ needs.prepare.outputs.meta-json }}') \
            $(printf '${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}@sha256:%s ' *)
      - name: Inspect image
        # if: github.event.inputs.push == 'true'
        run: |
          docker buildx imagetools inspect '${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ needs.prepare.outputs.meta-version }}'
