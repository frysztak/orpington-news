name: CD Master

on:
  push:
    branches:
      - 'master'
  workflow_dispatch:
    inputs:
      skip_push:
        description: 'Skip pushing Docker images'
        required: true
        default: false
        type: boolean

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  e2e:
    runs-on: ubuntu-latest
    name: E2E tests
    steps:
      - uses: actions/checkout@v3
        name: Checkout
      - uses: ./.github/actions/e2e
        name: Run E2E tests
        with:
          cypress-key: ${{ secrets.CYPRESS_RECORD_KEY }}
          github-token: ${{ secrets.GITHUB_TOKEN }}
          codecov-token: ${{ secrets.CODECOV_TOKEN }}

  build-amd64:
    name: Build AMD64 image
    runs-on: ubuntu-latest
    needs: [e2e]
    outputs:
      image_sha: ${{ steps.buildDocker.outputs.digest }}
    steps:
      - uses: actions/checkout@v3
        with:
          fetch-depth: 0

      - name: Extract version
        uses: martinbeentjes/npm-get-version-action@main
        id: package-version
        with:
          path: frontend

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      - name: Login to GHCR
        uses: docker/login-action@v2
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract metadata (tags, labels) for Docker
        id: meta
        uses: docker/metadata-action@v4
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
          flavor: |
            latest=auto
            suffix=-amd64,onlatest=true
          tags: |
            type=semver,pattern={{version}},value=v${{ steps.package-version.outputs.current-version }}

      - name: Build and push
        uses: docker/build-push-action@v3
        id: buildDocker
        with:
          context: .
          file: ./docker/Dockerfile
          platforms: linux/amd64
          push: false
          pull: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          build-args: |
            COMMIT_SHA=${{ github.sha }}
            BUILD_VERSION=${{ steps.package-version.outputs.current-version }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
          outputs: type=docker,dest=/tmp/amd64.tar

      - name: Upload image
        uses: actions/upload-artifact@v3
        with:
          name: amd64
          path: /tmp/amd64.tar

  build-arm64:
    name: Build ARM64 image
    runs-on: buildjet-4vcpu-ubuntu-2204-arm
    needs: [e2e]
    outputs:
      image_sha: ${{ steps.buildDocker.outputs.digest }}
    steps:
      - uses: actions/checkout@v3
        with:
          fetch-depth: 0

      - name: Extract version
        uses: martinbeentjes/npm-get-version-action@main
        id: package-version
        with:
          path: frontend

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      - name: Login to GHCR
        uses: docker/login-action@v2
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract metadata (tags, labels) for Docker
        id: meta
        uses: docker/metadata-action@v4
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
          flavor: |
            latest=auto
            suffix=-arm64,onlatest=true
          tags: |
            type=semver,pattern={{version}},value=v${{ steps.package-version.outputs.current-version }}

      - name: Build and push
        uses: docker/build-push-action@v3
        id: buildDocker
        with:
          context: .
          file: ./docker/Dockerfile
          platforms: linux/arm64
          push: false
          pull: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          build-args: |
            COMMIT_SHA=${{ github.sha }}
            BUILD_VERSION=${{ steps.package-version.outputs.current-version }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
          outputs: type=docker,dest=/tmp/arm64.tar

      - name: Upload image
        uses: actions/upload-artifact@v3
        with:
          name: arm64
          path: /tmp/arm64.tar

  publish:
    runs-on: ubuntu-latest
    name: Publish images
    needs: [build-amd64, build-arm64]
    if: github.event.inputs.skip_push == false
    steps:
    - uses: actions/checkout@v3
      with:
        fetch-depth: 0

    - name: Extract version
      uses: martinbeentjes/npm-get-version-action@main
      id: package-version
      with:
        path: frontend

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v2

    - name: Login to GHCR
      uses: docker/login-action@v2
      with:
        registry: ${{ env.REGISTRY }}
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}

    - name: Download AMD64 artifact
      uses: actions/download-artifact@v3
      with:
        name: amd64
        path: /tmp

    - name: Download ARM64 artifact
      uses: actions/download-artifact@v3
      with:
        name: arm64
        path: /tmp

    - name: Load images
      run: |
        docker load --input /tmp/amd64.tar
        docker load --input /tmp/arm64.tar
        docker image ls -a

    - name: Create version manifest and push
      run: |
        docker manifest create \
          ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ steps.package-version.outputs.current-version }} \
          --amend ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ steps.package-version.outputs.current-version }}-amd64 \
          --amend ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ steps.package-version.outputs.current-version }}-arm64
        docker manifest push ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ steps.package-version.outputs.current-version }}

    - name: Create latest manifest and push
      run: |
        docker manifest create \
          ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:latest \
          --amend ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:latest-amd64 \
          --amend ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:latest-arm64
        docker manifest push ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:latest
